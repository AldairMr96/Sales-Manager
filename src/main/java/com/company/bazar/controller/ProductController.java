package com.company.bazar.controller;import com.company.bazar.model.Product;import com.company.bazar.service.IProductService;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.crossstore.ChangeSetPersister;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@RequestMapping("/bazar/product")public class ProductController {@Autowiredprivate IProductService productService;    @PostMapping("/create")    @ResponseStatus(HttpStatus.CREATED)    public Product createProduct (@RequestBody Product product){        productService.createProduct(product);        return product;    }    @GetMapping ("/get")    @ResponseStatus(HttpStatus.OK)    public List<Product> getProduct (){        return  productService.getProducts();    }    @DeleteMapping("/delete")    public ResponseEntity<?> deleteProduct (@RequestParam Long codProduct){        try {            productService.deleteProduct(codProduct);            return ResponseEntity.ok("Delete Product susccessfully");        }catch (EntityNotFoundException ex){            return  ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        }catch (RuntimeException ex){            return  ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }    @PutMapping("/edit")    @ResponseStatus(HttpStatus.OK)    public ResponseEntity<?> editProduct(@RequestBody Product product ){        try {            productService.editProduct(product);            return ResponseEntity.ok(product);        }catch (EntityNotFoundException ex) {            // Captura la excepci贸n y devuelve una respuesta con estado 404            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        } catch (RuntimeException ex) {            // Captura cualquier otra excepci贸n no controlada            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }    @GetMapping("/availableStock")    @ResponseStatus(HttpStatus.OK)    public List<Product> getAvaliableStock (){       return productService.availableStock();    }    @GetMapping("/find/product")    @ResponseStatus    public ResponseEntity<?> findClient (@RequestParam long codProduct){        try{            Product product = productService.findProduct(codProduct);            return ResponseEntity.ok(product);        } catch (EntityNotFoundException ex) {            // Captura la excepci贸n y devuelve una respuesta con estado 404            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        } catch (RuntimeException ex) {            // Captura cualquier otra excepci贸n no controlada            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server internal Error");        }    }}